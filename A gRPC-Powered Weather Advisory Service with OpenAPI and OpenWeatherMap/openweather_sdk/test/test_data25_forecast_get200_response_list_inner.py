# coding: utf-8

"""
    OpenWeather Proxy API

    API for fetching weather, air quality, and geocoding data from OpenWeatherMap.

    The version of the OpenAPI document: 1.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from openweather.models.data25_forecast_get200_response_list_inner import Data25ForecastGet200ResponseListInner

class TestData25ForecastGet200ResponseListInner(unittest.TestCase):
    """Data25ForecastGet200ResponseListInner unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> Data25ForecastGet200ResponseListInner:
        """Test Data25ForecastGet200ResponseListInner
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `Data25ForecastGet200ResponseListInner`
        """
        model = Data25ForecastGet200ResponseListInner()
        if include_optional:
            return Data25ForecastGet200ResponseListInner(
                dt_txt = '',
                main = openweather.models._data_2_5_weather_get_200_response_main._data_2_5_weather_get_200_response_main(
                    temp = 1.337, 
                    feels_like = 1.337, 
                    humidity = 1.337, ),
                weather = [
                    openweather.models._data_2_5_weather_get_200_response_weather_inner._data_2_5_weather_get_200_response_weather_inner(
                        description = '', 
                        main = '', )
                    ]
            )
        else:
            return Data25ForecastGet200ResponseListInner(
        )
        """

    def testData25ForecastGet200ResponseListInner(self):
        """Test Data25ForecastGet200ResponseListInner"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
